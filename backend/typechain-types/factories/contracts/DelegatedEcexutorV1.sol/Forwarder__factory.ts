/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Forwarder,
  ForwarderInterface,
} from "../../../contracts/DelegatedEcexutorV1.sol/Forwarder";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256",
      },
    ],
    name: "domainSeperator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sigChainID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.CatalogRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sigChainID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.CatalogRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a8a806100206000396000f3fe6080604052600436106100435760003560e01c8063252f5a171461004f5780632d0335ab14610082578063b0565b27146100b8578063cd74662f146100e857600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b5061006f61006a3660046107fb565b6100fd565b6040519081526020015b60405180910390f35b34801561008e57600080fd5b5061006f61009d366004610814565b6001600160a01b031660009081526020819052604090205490565b3480156100c457600080fd5b506100d86100d3366004610844565b6101da565b6040519015158152602001610079565b6100fb6100f6366004610844565b6103c6565b005b604080518082018252601081526f21b0ba30b637b3a337b93bb7b93232b960811b602091820152815180830183526005815264302e302e3160d81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc5f32d73878c98882e40af5e5711d38489f82613a83a1efdeeda835ac3bb8188818401527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc199163811885606082015260808101939093523060a0808501919091528251808503909101815260c0909301909152815191012090565b60008061034c84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061034692507f9973041d6a830a5f346715795c66d1c47325731ef29daf2e32ac77059ec5a2e2915061024a905060208a018a610814565b61025a60408b0160208c01610814565b8a604001358b606001358c608001358d60c001358e60a001358f8060e0019061028391906108e4565b60405161029192919061092b565b60408051918290038220602083019a909a526001600160a01b0398891690820152969095166060870152608086019390935260a085019190915260c084015260e0830152610100820152610120810191909152610140016040516020818303038152906040528051906020012061030b8960a001356100fd565b6040805161190160f01b6020808301919091526022820193909352604280820194909452815180820390940184526062019052815191012090565b9061057c565b90508460c0013546148015610394575060808501356000806103716020890189610814565b6001600160a01b03166001600160a01b0316815260200190815260200160002054145b80156103bd57506103a86020860186610814565b6001600160a01b0316816001600160a01b0316145b95945050505050565b6103d18383836101da565b61043d5760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b60648201526084015b60405180910390fd5b61044c6080840135600161093b565b60008061045c6020870187610814565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808460200160208101906104969190610814565b6001600160a01b0316606086013560408701356104b660e08901896108e4565b6104c360208b018b610814565b6040516020016104d593929190610961565b60408051601f19818403018152908290526104ef916109b7565b600060405180830381858888f193505050503d806000811461052d576040519150601f19603f3d011682016040523d82523d6000602084013e610532565b606091505b50915091508181906105575760405162461bcd60e51b815260040161043491906109d3565b50610567603f6060870135610a06565b5a1161057557610575610a28565b5050505050565b600080600061058b85856105a0565b91509150610598816105e6565b509392505050565b6000808251604114156105d75760208301516040840151606085015160001a6105cb87828585610737565b945094505050506105df565b506000905060025b9250929050565b60008160048111156105fa576105fa610a3e565b14156106035750565b600181600481111561061757610617610a3e565b14156106655760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610434565b600281600481111561067957610679610a3e565b14156106c75760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610434565b60038160048111156106db576106db610a3e565b14156107345760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610434565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561076e57506000905060036107f2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156107c2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107eb576000600192509250506107f2565b9150600090505b94509492505050565b60006020828403121561080d57600080fd5b5035919050565b60006020828403121561082657600080fd5b81356001600160a01b038116811461083d57600080fd5b9392505050565b60008060006040848603121561085957600080fd5b833567ffffffffffffffff8082111561087157600080fd5b90850190610100828803121561088657600080fd5b9093506020850135908082111561089c57600080fd5b818601915086601f8301126108b057600080fd5b8135818111156108bf57600080fd5b8760208285010111156108d157600080fd5b6020830194508093505050509250925092565b6000808335601e198436030181126108fb57600080fd5b83018035915067ffffffffffffffff82111561091657600080fd5b6020019150368190038213156105df57600080fd5b8183823760009101908152919050565b6000821982111561095c57634e487b7160e01b600052601160045260246000fd5b500190565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60005b838110156109a257818101518382015260200161098a565b838111156109b1576000848401525b50505050565b600082516109c9818460208701610987565b9190910192915050565b60208152600082518060208401526109f2816040850160208701610987565b601f01601f19169190910160400192915050565b600082610a2357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212207081293891ecc75f1bf4004e2d644de5ac06dbfae24627250492a4eb10ab674e64736f6c63430008090033";

type ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Forwarder__factory extends ContractFactory {
  constructor(...args: ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  override connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
