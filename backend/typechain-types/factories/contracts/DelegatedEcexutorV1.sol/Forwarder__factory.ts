/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Forwarder,
  ForwarderInterface,
} from "../../../contracts/DelegatedEcexutorV1.sol/Forwarder";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256",
      },
    ],
    name: "domainSeperator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sigChainID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.CatalogRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sigChainID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.CatalogRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a7f806100206000396000f3fe60806040526004361061003f5760003560e01c8063252f5a17146100445780632d0335ab14610077578063b0565b27146100ad578063cd74662f146100dd575b600080fd5b34801561005057600080fd5b5061006461005f3660046107f0565b6100f2565b6040519081526020015b60405180910390f35b34801561008357600080fd5b50610064610092366004610809565b6001600160a01b031660009081526020819052604090205490565b3480156100b957600080fd5b506100cd6100c8366004610839565b6101cf565b604051901515815260200161006e565b6100f06100eb366004610839565b6103bb565b005b604080518082018252601081526f21b0ba30b637b3a337b93bb7b93232b960811b602091820152815180830183526005815264302e302e3160d81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc5f32d73878c98882e40af5e5711d38489f82613a83a1efdeeda835ac3bb8188818401527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc199163811885606082015260808101939093523060a0808501919091528251808503909101815260c0909301909152815191012090565b60008061034184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061033b92507f9973041d6a830a5f346715795c66d1c47325731ef29daf2e32ac77059ec5a2e2915061023f905060208a018a610809565b61024f60408b0160208c01610809565b8a604001358b606001358c608001358d60c001358e60a001358f8060e0019061027891906108d9565b604051610286929190610920565b60408051918290038220602083019a909a526001600160a01b0398891690820152969095166060870152608086019390935260a085019190915260c084015260e083015261010082015261012081019190915261014001604051602081830303815290604052805190602001206103008960a001356100f2565b6040805161190160f01b6020808301919091526022820193909352604280820194909452815180820390940184526062019052815191012090565b90610571565b90508460c0013546148015610389575060808501356000806103666020890189610809565b6001600160a01b03166001600160a01b0316815260200190815260200160002054145b80156103b2575061039d6020860186610809565b6001600160a01b0316816001600160a01b0316145b95945050505050565b6103c68383836101cf565b6104325760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b60648201526084015b60405180910390fd5b61044160808401356001610930565b6000806104516020870187610809565b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008084602001602081019061048b9190610809565b6001600160a01b0316606086013560408701356104ab60e08901896108d9565b6104b860208b018b610809565b6040516020016104ca93929190610956565b60408051601f19818403018152908290526104e4916109ac565b600060405180830381858888f193505050503d8060008114610522576040519150601f19603f3d011682016040523d82523d6000602084013e610527565b606091505b509150915081819061054c5760405162461bcd60e51b815260040161042991906109c8565b5061055c603f60608701356109fb565b5a1161056a5761056a610a1d565b5050505050565b60008060006105808585610595565b9150915061058d816105db565b509392505050565b6000808251604114156105cc5760208301516040840151606085015160001a6105c08782858561072c565b945094505050506105d4565b506000905060025b9250929050565b60008160048111156105ef576105ef610a33565b14156105f85750565b600181600481111561060c5761060c610a33565b141561065a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610429565b600281600481111561066e5761066e610a33565b14156106bc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610429565b60038160048111156106d0576106d0610a33565b14156107295760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610429565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561076357506000905060036107e7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156107b7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107e0576000600192509250506107e7565b9150600090505b94509492505050565b60006020828403121561080257600080fd5b5035919050565b60006020828403121561081b57600080fd5b81356001600160a01b038116811461083257600080fd5b9392505050565b60008060006040848603121561084e57600080fd5b833567ffffffffffffffff8082111561086657600080fd5b90850190610100828803121561087b57600080fd5b9093506020850135908082111561089157600080fd5b818601915086601f8301126108a557600080fd5b8135818111156108b457600080fd5b8760208285010111156108c657600080fd5b6020830194508093505050509250925092565b6000808335601e198436030181126108f057600080fd5b83018035915067ffffffffffffffff82111561090b57600080fd5b6020019150368190038213156105d457600080fd5b8183823760009101908152919050565b6000821982111561095157634e487b7160e01b600052601160045260246000fd5b500190565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60005b8381101561099757818101518382015260200161097f565b838111156109a6576000848401525b50505050565b600082516109be81846020870161097c565b9190910192915050565b60208152600082518060208401526109e781604085016020870161097c565b601f01601f19169190910160400192915050565b600082610a1857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220420c77bd69eaacfff7df0dd1b87a02bb9a90e2b745023ead814c9f0ccdd9c5c464736f6c63430008090033";

type ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Forwarder__factory extends ContractFactory {
  constructor(...args: ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  override connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
