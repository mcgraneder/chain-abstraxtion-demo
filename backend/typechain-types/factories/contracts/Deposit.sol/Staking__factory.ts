/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Staking,
  StakingInterface,
} from "../../../contracts/Deposit.sol/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MinimalForwarder",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "symbol",
        type: "address",
      },
    ],
    name: "depositTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "depositTokensToForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "token",
        type: "bytes32",
      },
    ],
    name: "getWhitelistedTokenAddresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "whitelistedTokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "symbol",
        type: "address",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161084638038061084683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107b461009260003960008181610131015261058701526107b46000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806390a75d351161005b57806390a75d3514610171578063aa3d9a1514610184578063afde1be4146101ad578063bfd53eab146101c057600080fd5b8063069fdaae1461008d5780631242e5fd146100a25780633586932b146100e0578063572b6c0514610121575b600080fd5b6100a061009b3660046105e4565b6101d3565b005b6100cd6100b0366004610610565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101096100ee36600461063a565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100d7565b61016161012f366004610653565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016100d7565b6100a061017f366004610675565b610275565b61010961019236600461063a565b6001602052600090815260409020546001600160a01b031681565b6100a06101bb366004610675565b6103a4565b6100a06101ce3660046106c2565b610462565b6101db610574565b6001600160a01b03166101ec610574565b6001600160a01b0316146102475760405162461bcd60e51b815260206004820152601b60248201527f546869732066756e6374696f6e206973206e6f74207075626c6963000000000060448201526064015b60405180910390fd5b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b038083166000908152600260209081526040808320938516835292905220548411156102de5760405162461bcd60e51b8152602060048201526011602482015270496e737566666963656e742066756e647360781b604482015260640161023e565b6001600160a01b03808416600090815260026020908152604080832093851683529290529081208054869290610315908490610714565b909155505060405163a9059cbb60e01b81526001600160a01b0384811660048301526024820186905282169063a9059cbb906044015b602060405180830381600087803b15801561036557600080fd5b505af1158015610379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d919061072b565b5050505050565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018690528416906323b872dd90606401602060405180830381600087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c919061072b565b5060405163a9059cbb60e01b81526001600160a01b0382811660048301526024820186905284169063a9059cbb9060440161034b565b6001600160a01b0380831660009081526002602090815260408083209385168352929052908120805485929061049990849061074d565b90915550600090506001600160a01b03821663dd62ed3e6104b8610574565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b1580156104fd57600080fd5b505afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190610765565b6040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201879052919250908316906323b872dd9060640161034b565b600061057e610583565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314156105c3575060131936013560601c90565b503390565b80356001600160a01b03811681146105df57600080fd5b919050565b600080604083850312156105f757600080fd5b82359150610607602084016105c8565b90509250929050565b6000806040838503121561062357600080fd5b61062c836105c8565b9150610607602084016105c8565b60006020828403121561064c57600080fd5b5035919050565b60006020828403121561066557600080fd5b61066e826105c8565b9392505050565b6000806000806080858703121561068b57600080fd5b8435935061069b602086016105c8565b92506106a9604086016105c8565b91506106b7606086016105c8565b905092959194509250565b6000806000606084860312156106d757600080fd5b833592506106e7602085016105c8565b91506106f5604085016105c8565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b600082821015610726576107266106fe565b500390565b60006020828403121561073d57600080fd5b8151801515811461066e57600080fd5b60008219821115610760576107606106fe565b500190565b60006020828403121561077757600080fd5b505191905056fea2646970667358221220f215e7e5168ab8de692203b8657e32795c45162585595b2eb555f71c6fbf04fb64736f6c63430008090033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(forwarder, overrides || {}) as Promise<Staking>;
  }
  override getDeployTransaction(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
