/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Staking,
  StakingInterface,
} from "../../../contracts/Deposit.sol/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MinimalForwarder",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "accountBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
    ],
    name: "depositTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "depositTokensToForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "token",
        type: "bytes32",
      },
    ],
    name: "getWhitelistedTokenAddresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "whitelistedTokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610bbe380380610bbe83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610b2d6100916000396000818160f801526108960152610b2d6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063aa3d9a151161005b578063aa3d9a151461014b578063afaa918714610174578063d15b223e14610187578063e64fe3661461019a57600080fd5b8063069fdaae1461008d5780633586932b146100a2578063572b6c05146100e85780638f97994b14610138575b600080fd5b6100a061009b366004610914565b6101d3565b005b6100cb6100b0366004610940565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b6101286100f6366004610959565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016100df565b6100a061014636600461097b565b610275565b6100cb610159366004610940565b6001602052600090815260409020546001600160a01b031681565b6100a061018236600461099d565b6103f2565b6100a061019536600461097b565b610668565b6101c56101a83660046109d2565b600260209081526000928352604080842090915290825290205481565b6040519081526020016100df565b6101db61083c565b6001600160a01b03166101ec61083c565b6001600160a01b0316146102475760405162461bcd60e51b815260206004820152601b60248201527f546869732066756e6374696f6e206973206e6f74207075626c6963000000000060448201526064015b60405180910390fd5b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b816002600061028261083c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008381526020019081526020016000205410156102f65760405162461bcd60e51b8152602060048201526011602482015270496e737566666963656e742066756e647360781b604482015260640161023e565b816002600061030361083c565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083815260200190815260200160002060008282546103439190610a12565b90915550506000818152600160205260409020546001600160a01b031663a9059cbb61036d61083c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b1580156103b557600080fd5b505af11580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190610a29565b505050565b82600260006103ff61083c565b6001600160a01b03166001600160a01b031681526020019081526020016000206000848152602001908152602001600020600082825461043f9190610a4b565b90915550506000828152600160205260408120546001600160a01b031663dd62ed3e61046961083c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b1580156104ae57600080fd5b505afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190610a63565b905061052260405180604001604052806009815260200168616c6c6f77616e636560b81b81525061051561083c565b61051d61083c565b61084b565b6000838152600160205260409020546001600160a01b03166323b872dd61054761083c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401602060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190610a29565b506000838152600160205260409081902054905163a9059cbb60e01b81526001600160a01b038481166004830152602482018790529091169063a9059cbb90604401602060405180830381600087803b15801561062957600080fd5b505af115801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190610a29565b5050505050565b816002600061067561083c565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083815260200190815260200160002060008282546106b59190610a4b565b90915550506000818152600160205260408120546001600160a01b031663dd62ed3e6106df61083c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190610a63565b905061078b60405180604001604052806009815260200168616c6c6f77616e636560b81b81525061051561083c565b6000828152600160205260409020546001600160a01b03166323b872dd6107b061083c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101869052606401602060405180830381600087803b1580156107fe57600080fd5b505af1158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190610a29565b50505050565b6000610846610892565b905090565b6103ed83838360405160240161086393929190610a7c565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b1790526108d7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314156108d2575060131936013560601c90565b503390565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b038116811461090f57600080fd5b919050565b6000806040838503121561092757600080fd5b82359150610937602084016108f8565b90509250929050565b60006020828403121561095257600080fd5b5035919050565b60006020828403121561096b57600080fd5b610974826108f8565b9392505050565b6000806040838503121561098e57600080fd5b50508035926020909101359150565b6000806000606084860312156109b257600080fd5b83359250602084013591506109c9604085016108f8565b90509250925092565b600080604083850312156109e557600080fd5b6109ee836108f8565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610a2457610a246109fc565b500390565b600060208284031215610a3b57600080fd5b8151801515811461097457600080fd5b60008219821115610a5e57610a5e6109fc565b500190565b600060208284031215610a7557600080fd5b5051919050565b606081526000845180606084015260005b81811015610aaa5760208188018101516080868401015201610a8d565b81811115610abc576000608083860101525b506001600160a01b0385166020840152601f01601f191682016080019050610aef60408301846001600160a01b03169052565b94935050505056fea2646970667358221220a816f2c1f05fc880908069f0fe3bad3c0bc96176d3365327bf79a9190998f79164736f6c63430008090033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(forwarder, overrides || {}) as Promise<Staking>;
  }
  override getDeployTransaction(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
