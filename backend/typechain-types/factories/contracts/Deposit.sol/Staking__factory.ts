/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Staking,
  StakingInterface,
} from "../../../contracts/Deposit.sol/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MinimalForwarder",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "accountBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
    ],
    name: "depositTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "token",
        type: "bytes32",
      },
    ],
    name: "getWhitelistedTokenAddresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "whitelistedTokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161090238038061090283398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516108716100916000396000818160ed015261060f01526108716000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638f97994b1161005b5780638f97994b1461012d578063aa3d9a1514610140578063d15b223e14610169578063e64fe3661461017c57600080fd5b8063069fdaae146100825780633586932b14610097578063572b6c05146100dd575b600080fd5b61009561009036600461068d565b6101b5565b005b6100c06100a53660046106b9565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61011d6100eb3660046106d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016100d4565b61009561013b3660046106f4565b610257565b6100c061014e3660046106b9565b6001602052600090815260409020546001600160a01b031681565b6100956101773660046106f4565b6103d4565b6101a761018a366004610716565b600260209081526000928352604080842090915290825290205481565b6040519081526020016100d4565b6101bd6105b5565b6001600160a01b03166101ce6105b5565b6001600160a01b0316146102295760405162461bcd60e51b815260206004820152601b60248201527f546869732066756e6374696f6e206973206e6f74207075626c6963000000000060448201526064015b60405180910390fd5b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b81600260006102646105b5565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008381526020019081526020016000205410156102d85760405162461bcd60e51b8152602060048201526011602482015270496e737566666963656e742066756e647360781b6044820152606401610220565b81600260006102e56105b5565b6001600160a01b03166001600160a01b03168152602001908152602001600020600083815260200190815260200160002060008282546103259190610756565b90915550506000818152600160205260409020546001600160a01b031663a9059cbb61034f6105b5565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf919061076d565b505050565b81600260006103e16105b5565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008381526020019081526020016000206000828254610421919061078f565b90915550506000818152600160205260408120546001600160a01b031663dd62ed3e61044b6105b5565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561049057600080fd5b505afa1580156104a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c891906107a7565b905061050460405180604001604052806009815260200168616c6c6f77616e636560b81b8152506104f76105b5565b6104ff6105b5565b6105c4565b6000828152600160205260409020546001600160a01b03166323b872dd6105296105b5565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101869052606401602060405180830381600087803b15801561057757600080fd5b505af115801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105af919061076d565b50505050565b60006105bf61060b565b905090565b6103cf8383836040516024016105dc939291906107c0565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b179052610650565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561064b575060131936013560601c90565b503390565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b038116811461068857600080fd5b919050565b600080604083850312156106a057600080fd5b823591506106b060208401610671565b90509250929050565b6000602082840312156106cb57600080fd5b5035919050565b6000602082840312156106e457600080fd5b6106ed82610671565b9392505050565b6000806040838503121561070757600080fd5b50508035926020909101359150565b6000806040838503121561072957600080fd5b61073283610671565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561076857610768610740565b500390565b60006020828403121561077f57600080fd5b815180151581146106ed57600080fd5b600082198211156107a2576107a2610740565b500190565b6000602082840312156107b957600080fd5b5051919050565b606081526000845180606084015260005b818110156107ee57602081880181015160808684010152016107d1565b81811115610800576000608083860101525b506001600160a01b0385166020840152601f01601f19168201608001905061083360408301846001600160a01b03169052565b94935050505056fea26469706673582212209fea7b4e1de709c3427b002dc259b15f9c301ded2875ddacccd300e81af2a49964736f6c63430008090033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(forwarder, overrides || {}) as Promise<Staking>;
  }
  override getDeployTransaction(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
