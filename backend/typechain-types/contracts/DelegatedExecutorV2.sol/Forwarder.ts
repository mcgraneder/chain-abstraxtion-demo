/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Forwarder {
  export type UserOpStruct = {
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    gas: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    sigChainID: PromiseOrValue<BigNumberish>;
    chainID: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type UserOpStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    from: string;
    to: string;
    value: BigNumber;
    gas: BigNumber;
    nonce: BigNumber;
    sigChainID: BigNumber;
    chainID: BigNumber;
    data: string;
  };
}

export interface ForwarderInterface extends utils.Interface {
  functions: {
    "domainSeperator(uint256)": FunctionFragment;
    "exec((address,address,uint256,uint256,uint256,uint256,uint256,bytes)[],bytes)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "domainSeperator" | "exec" | "getNonce"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "domainSeperator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [Forwarder.UserOpStruct[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "domainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;

  events: {
    "LogCall(address,uint256,bytes)": EventFragment;
    "LogReceivedEther(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogReceivedEther"): EventFragment;
}

export interface LogCallEventObject {
  _contract: string;
  _value: BigNumber;
  _data: string;
}
export type LogCallEvent = TypedEvent<
  [string, BigNumber, string],
  LogCallEventObject
>;

export type LogCallEventFilter = TypedEventFilter<LogCallEvent>;

export interface LogReceivedEtherEventObject {
  _from: string;
  _amount: BigNumber;
}
export type LogReceivedEtherEvent = TypedEvent<
  [string, BigNumber],
  LogReceivedEtherEventObject
>;

export type LogReceivedEtherEventFilter =
  TypedEventFilter<LogReceivedEtherEvent>;

export interface Forwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    domainSeperator(
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    exec(
      userOps: Forwarder.UserOpStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNonce(
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  domainSeperator(
    _chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  exec(
    userOps: Forwarder.UserOpStruct[],
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNonce(
    from: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    domainSeperator(
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    exec(
      userOps: Forwarder.UserOpStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getNonce(
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LogCall(address,uint256,bytes)"(
      _contract?: PromiseOrValue<string> | null,
      _value?: null,
      _data?: null
    ): LogCallEventFilter;
    LogCall(
      _contract?: PromiseOrValue<string> | null,
      _value?: null,
      _data?: null
    ): LogCallEventFilter;

    "LogReceivedEther(address,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _amount?: null
    ): LogReceivedEtherEventFilter;
    LogReceivedEther(
      _from?: PromiseOrValue<string> | null,
      _amount?: null
    ): LogReceivedEtherEventFilter;
  };

  estimateGas: {
    domainSeperator(
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exec(
      userOps: Forwarder.UserOpStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNonce(
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    domainSeperator(
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exec(
      userOps: Forwarder.UserOpStruct[],
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
